#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var moment = require('moment');
var activeClients = 0;
var chatroomInit = function (messageCollection){
  io.sockets.on('connection', function (socket){
    messageCollection.find({}, {
      sort: [['_id', 'desc']],
      limit: 10
    }).toArray(function (err, results){
      var i = results.length;

      while(i -= 1){
        socket.emit('chat', results[i]);
      }
    });
    activeClients += 1;
    io.sockets.emit('meesage', {clients: activeClients});
    socket.on('disconnect', function (data){
      activeClients -= 1;
      io.sockets.emit('message', {clients: activeClients});
      if (!activeClients){
        db.close();
      }
    });
    socket.on('newchat', function (data){
      data.timestamp = moment().format('h:mm');
      io.sockets.emit('chat', data);
      messageCollection.insert(data, function (err, result){
        console.log(result);
      });
    });
  });
};
var mongodb = require('mongodb'),
  dbServer = new mongodb.Server('localhost', 27017, {
    auto_reconnect: true
  }),
  db = new mongodb.Db('chatroom', dbServer, {w: 1});

db.open(function (err, conn){
  db.collection('chatroomMessages', function (err, collection){
    chatroomInit(collection);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
